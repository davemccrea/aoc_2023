# Advent of Code - Day 03

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"}
])
```

## Setup

<!-- livebook:{"attrs":{"assign_to":"puzzle_input","day":"3","session_secret":"AOC_SESSION","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2023", "3", System.fetch_env!("LB_AOC_SESSION"))
```

```elixir
defmodule Parser do
  def parse(input) do
  end
end
```

```elixir
ExUnit.start(autorun: false)

defmodule ParserTest do
  use ExUnit.Case, async: true
  import Parser

  @input ""
  @expected nil

  test "parse test" do
    actual = parse(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

<!-- livebook:{"branch_parent_index":0} -->

## Part One

### Description

You and the Elf eventually reach a gondola lift station; he says the gondola lift will take you up to the water source, but this is as far as he can bring you. You go inside.

It doesn't take long to find the gondolas, but there seems to be a problem: they're not moving.

"Aaah!"

You turn around to see a slightly-greasy Elf with a wrench and a look of surprise. "Sorry, I wasn't expecting anyone! The gondola lift isn't working right now; it'll still be a while before I can fix it." You offer to help.

The engineer explains that an engine part seems to be missing from the engine, but nobody can figure out which one. If you can add up all the part numbers in the engine schematic, it should be easy to work out which part is missing.

The engine schematic (your puzzle input) consists of a visual representation of the engine. There are lots of numbers and symbols you don't really understand, but apparently any number adjacent to a symbol, even diagonally, is a "part number" and should be included in your sum. (Periods (.) do not count as a symbol.)

Here is an example engine schematic:

```
467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..
```

In this schematic, two numbers are not part numbers because they are not adjacent to a symbol: 114 (top right) and 58 (middle right). Every other number is adjacent to a symbol and so is a part number; their sum is 4361.

Of course, the actual engine schematic is much larger. What is the sum of all of the part numbers in the engine schematic?

<!-- livebook:{"break_markdown":true} -->

### Code

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule PartOne do
  def solve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run_partone(input)}")
  end

  def prepare_input(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(fn row -> String.split(row, "", trim: true) end)
  end

  def find_symbols_and_numbers(grid) do
    grid
    |> Enum.with_index()
    |> Enum.reduce({%{}, %{}}, fn {row, row_index}, {symbols, numbers} ->
      {_, row_symbols, row_numbers, _} =
        row
        |> Enum.with_index()
        |> Enum.reduce({[], %{}, %{}, nil}, fn {value, col_index}, {acc, symbols, numbers, key} ->
          value = add_label(value)
          symbols = collect_symbols(symbols, value, {row_index, col_index})
          {key, numbers} = collect_numbers(numbers, key || {row_index, col_index}, value, acc)
          {[value | acc], symbols, numbers, key}
        end)

      {Map.merge(symbols, row_symbols), Map.merge(numbers, row_numbers)}
    end)
  end

  def run_partone(input) do
    {symbols, numbers} =
      input
      |> prepare_input()
      |> find_symbols_and_numbers()

    numbers
    |> Enum.reduce([], fn {_key, list} = number, acc ->
      keys = get_neighbour_keys(number)
      if is_part_number?(keys, symbols), do: [number_list_to_integer(list) | acc], else: acc
    end)
    |> Enum.sum()
  end

  def number_list_to_integer(list) do
    list
    |> Enum.reverse()
    |> Enum.join("")
    |> String.to_integer()
  end

  def is_part_number?(keys, symbols) do
    keys
    |> Enum.filter(&Map.has_key?(symbols, &1))
    |> Enum.any?()
  end

  def get_neighbour_keys({{r, c}, number_list}) do
    number_list
    |> Enum.with_index()
    |> Enum.reduce([], fn {_, i}, acc ->
      # working clockwise from top left
      [
        [
          {r - 1, c - 1 + i},
          {r - 1, c + i},
          {r - 1, c + 1 + i},
          {r, c + 1 + i},
          {r + 1, c + 1 + i},
          {r + 1, c + i},
          {r + 1, c - 1 + i},
          {r, c - 1 + i}
        ]
        | acc
      ]
    end)
    |> List.flatten()
    |> Enum.uniq()
  end

  def collect_numbers(numbers, key, {:number, n}, [{:number, _} | _tail]) do
    {key, Map.update!(numbers, key, fn list -> [n | list] end)}
  end

  def collect_numbers(numbers, key, {:number, n}, _) do
    {key, Map.put(numbers, key, [n])}
  end

  def collect_numbers(numbers, _, _, _) do
    {nil, numbers}
  end

  def collect_symbols(symbols, {:symbol, symbol}, {_row_index, _col_index} = key) do
    Map.put(symbols, key, symbol)
  end

  def collect_symbols(symbols, _, _), do: symbols

  def add_label(value) do
    case value do
      "0" -> {:number, 0}
      "1" -> {:number, 1}
      "2" -> {:number, 2}
      "3" -> {:number, 3}
      "4" -> {:number, 4}
      "5" -> {:number, 5}
      "6" -> {:number, 6}
      "7" -> {:number, 7}
      "8" -> {:number, 8}
      "9" -> {:number, 9}
      "." -> {:space, "."}
      _ -> {:symbol, value}
    end
  end
end
```

### Tests

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case, async: true

  test "AoC example" do
    input = """
    467..114..
    ...*......
    ..35..633.
    ......#...
    617*......
    .....+.58.
    ..592.....
    ......755.
    ...$.*....
    .664.598..
    """

    actual = PartOne.run_partone(input)
    assert actual == 4361
  end

  test "reddit sample" do
    input = """
    12.......*..
    +.........34
    .......-12..
    ..78........
    ..*....60...
    78.........9
    .5.....23..$
    8...90*12...
    ............
    2.2......12.
    .*.........*
    1.1..503+.56
    """

    actual = PartOne.run_partone(input)
    assert actual == 925
  end
end

ExUnit.run()
```

### Solution

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
PartOne.solve(puzzle_input)
```

<!-- livebook:{"branch_parent_index":0} -->

## Part Two

### Description

The engineer finds the missing part and installs it in the engine! As the engine springs to life, you jump in the closest gondola, finally ready to ascend to the water source.

You don't seem to be going very fast, though. Maybe something is still wrong? Fortunately, the gondola has a phone labeled "help", so you pick it up and the engineer answers.

Before you can explain the situation, she suggests that you look out the window. There stands the engineer, holding a phone in one hand and waving with the other. You're going so slowly that you haven't even left the station. You exit the gondola.

The missing part wasn't the only issue - one of the gears in the engine is wrong. A gear is any * symbol that is adjacent to exactly two part numbers. Its gear ratio is the result of multiplying those two numbers together.

This time, you need to find the gear ratio of every gear and add them all up so that the engineer can figure out which gear needs to be replaced.

Consider the same engine schematic again:

```
467..114..
...*......
..35..633.
......#...
617*......
.....+.58.
..592.....
......755.
...$.*....
.664.598..
```

In this schematic, there are two gears. The first is in the top left; it has part numbers 467 and 35, so its gear ratio is 16345. The second gear is in the lower right; its gear ratio is 451490. (The * adjacent to 617 is not a gear because it is only adjacent to one part number.) Adding up all of the gear ratios produces 467835.

What is the sum of all of the gear ratios in your engine schematic?

<!-- livebook:{"break_markdown":true} -->

### Code

```elixir
defmodule PartTwo do
  import PartOne

  def solve(input) do
    IO.puts("--- Part Two ---")
    IO.puts("Result: #{run_parttwo(input)}")
  end

  def run_parttwo(input) do
    {symbols, numbers} =
      input
      |> prepare_input()
      |> find_symbols_and_numbers()

    # [{{row_index, col_index}, "*"}]
    grid_gear_keys =
      symbols
      |> Enum.filter(fn {{_, _}, symbol} -> symbol == "*" end)
      |> Enum.map(fn {key, _} -> key end)

    # Locate every gear
    # Check if a number has a gear adjacent

    Enum.reduce(numbers, [], fn {_key, number_list} = number, acc ->
      number_gear_keys =
        number
        |> get_neighbour_keys()
        |> Enum.filter(&(&1 in grid_gear_keys))

      case number_gear_keys do
        [] ->
          acc

        _ ->
          number = number_list_to_integer(number_list)
          [Enum.reduce(number_gear_keys, [], fn key, acc -> [{key, number} | acc] end) | acc]
      end
    end)
    |> List.flatten()
    |> Enum.reduce(%{}, fn {k, v}, acc ->
      Map.update(acc, k, [v], &[v | &1])
    end)
    |> Map.reject(fn {_k, v} -> Enum.count(v) == 1 end)
    |> Enum.map(fn {_k, v} -> Enum.reduce(v, 1, fn n, acc -> n * acc end) end)
    |> Enum.sum()
  end

  def get_gear_keys(keys, gears) do
    Enum.filter(keys, &Map.has_key?(gears, &1))
  end
end

PartTwo.run_parttwo(puzzle_input)
```

### Tests

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case, async: true
  import PartTwo

  @input """
  467..114..
  ...*......
  ..35..633.
  ......#...
  617*......
  .....+.58.
  ..592.....
  ......755.
  ...$.*....
  .664.598..
  """
  @expected 467_835

  test "part two" do
    actual = run_parttwo(@input) |> IO.inspect()
    assert actual == @expected
  end
end

ExUnit.run()
```

### Solution

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
PartTwo.solve(puzzle_input)
```

<!-- livebook:{"offset":9936,"stamp":{"token":"XCP.XHJH0lkkA0rIapmNM7aVJSJocbS6cPaGK6q8iSNLUMXEeJKm8n_b9g-jJsiEus7PQBifx33d-qaul37X2FN9KWDdR9AceBF6wZ7Twoam4qzodzzvXj4","version":2}} -->

# Advent of Code - Day 01

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"}
])
```

## Setup

<!-- livebook:{"attrs":{"assign_to":"puzzle_input","day":"1","session_secret":"AOC_SESSION","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2023", "1", System.fetch_env!("LB_AOC_SESSION"))
```

```elixir
defmodule Parser do
  def parse(input) do
  end
end
```

```elixir
ExUnit.start(autorun: false)

defmodule ParserTest do
  use ExUnit.Case, async: true
  import Parser

  @input ""
  @expected nil

  test "parse test" do
    actual = parse(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

<!-- livebook:{"branch_parent_index":0} -->

## Part One

### Description

Something is wrong with global snow production, and you've been selected to take a look. The Elves have even given you a map; on it, they've used stars to mark the top fifty locations that are likely to be having problems.

You've been doing this long enough to know that to restore snow operations, you need to check all fifty stars by December 25th.

Collect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!

You try to ask why they can't just use a weather machine ("not powerful enough") and where they're even sending you ("the sky") and why your map looks mostly blank ("you sure ask a lot of questions") and hang on did you just say the sky ("of course, where do you think snow comes from") when you realize that the Elves are already loading you into a trebuchet ("please hold still, we need to strap you in").

As they're making the final adjustments, they discover that their calibration document (your puzzle input) has been amended by a very young Elf who was apparently just excited to show off her art skills. Consequently, the Elves are having trouble reading the values on the document.

The newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.

For example:

```
1abc2
pqr3stu8vwx
a1b2c3d4e5f
treb7uchet
```

In this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.

Consider your entire calibration document. What is the sum of all of the calibration values?

<!-- livebook:{"break_markdown":true} -->

### Code

```elixir
defmodule PartOne do
  def solve(input) do
    IO.puts("--- Part One ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
    input
    |> String.split()
    |> Enum.reduce(0, fn str, acc ->
      n =
        str
        |> String.replace(~r/[^\d]/, "")
        |> (&"#{String.first(&1)}#{String.last(&1)}").()
        |> String.to_integer()

      acc + n
    end)
  end
end
```

### Tests

```elixir
ExUnit.start(autorun: false)

defmodule PartOneTest do
  use ExUnit.Case, async: true
  import PartOne

  @input """
  1abc2
  pqr3stu8vwx
  a1b2c3d4e5f
  treb7uchet
  """
  @expected 142

  test "part two" do
    actual = run(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

### Solution

```elixir
PartOne.solve(puzzle_input)
```

<!-- livebook:{"branch_parent_index":0} -->

## Part Two

### Description

Your calculation isn't quite right. It looks like some of the digits are actually spelled out with letters: one, two, three, four, five, six, seven, eight, and nine also count as valid "digits".

Equipped with this new information, you now need to find the real first and last digit on each line. For example:

```
two1nine
eightwothree
abcone2threexyz
xtwone3four
4nineeightseven2
zoneight234
7pqrstsixteen
```

In this example, the calibration values are 29, 83, 13, 24, 42, 14, and 76. Adding these together produces 281.

What is the sum of all of the calibration values?

<!-- livebook:{"break_markdown":true} -->

### Code

```elixir
defmodule PartTwo do
  def solve(input) do
    IO.puts("--- Part Two ---")
    IO.puts("Result: #{run(input)}")
  end

  def run(input) do
    input
    |> String.split()
    |> Enum.reduce(0, fn str, acc ->
      acc +
        (~r/(?=(one|two|three|four|five|six|seven|eight|nine|[0-9]))/
         |> Regex.scan(str)
         |> List.flatten()
         |> Enum.filter(&(&1 != ""))
         |> Enum.map(fn x ->
           case x do
             "one" -> "1"
             "two" -> "2"
             "three" -> "3"
             "four" -> "4"
             "five" -> "5"
             "six" -> "6"
             "seven" -> "7"
             "eight" -> "8"
             "nine" -> "9"
             _ -> x
           end
         end)
         |> (&"#{List.first(&1)}#{List.last(&1)}").()
         |> String.to_integer())
    end)
  end
end
```

### Tests

```elixir
ExUnit.start(autorun: false)

defmodule PartTwoTest do
  use ExUnit.Case, async: true
  import PartTwo

  @input """
  two1nine
  eightwothree
  abcone2threexyz
  xtwone3four
  4nineeightseven2
  zoneight234
  7pqrstsixteen
  eightwo
  """
  @expected 363

  test "part two" do
    actual = run(@input)
    assert actual == @expected
  end
end

ExUnit.run()
```

### Solution

```elixir
PartTwo.solve(puzzle_input)
```

<!-- livebook:{"offset":5458,"stamp":{"token":"XCP._j9Xv2UonpyezoA_MxZFYaK0QrXZIgQRMebzQAGLB_gensuWKOzkQ6XOt9-FM_20biQbIOGRszYLw60T6QlIFGtH93v2cmqcroGiSncCp23LVd6aZ2c","version":2}} -->
